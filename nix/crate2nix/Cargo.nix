
# This file was @generated by crate2nix 0.10.0 with the command:
#   "generate" "--default-features" "--output=nix/crate2nix/Cargo.nix"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? if buildRustCrate != null
    then lib.warn "crate2nix: Passing `buildRustCrate` as argument to Cargo.nix is deprecated. If you don't customize `buildRustCrate`, replace `callPackage ./Cargo.nix {}` by `import ./Cargo.nix { inherit pkgs; }`, and if you need to customize `buildRustCrate`, use `buildRustCrateForPkgs` instead." (_: buildRustCrate)
    else pkgs: pkgs.buildRustCrate
  # Deprecated
, buildRustCrate ? null
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "holochain-nixpkgs-util" = rec {
      packageId = "holochain-nixpkgs-util";
      build = internal.buildRustCrateWithFeatures {
        packageId = "holochain-nixpkgs-util";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "update-holochain-versions" = rec {
      packageId = "update-holochain-versions";
      build = internal.buildRustCrateWithFeatures {
        packageId = "update-holochain-versions";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.18";
        edition = "2018";
        sha256 = "0vv50b3nvkhyy7x7ip19qnsq11bqlnffkmj2yx2xlyk5wzawydqy";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.12.1";
        edition = "2015";
        sha256 = "1ljmkbilxgmhavxvxqa7qvm6f3fjggi7q2l3a72q9x0cxjvrnanm";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
        };
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.56";
        edition = "2018";
        sha256 = "09rar14hn9xmafjrjhfxkngmp57gk91pqpckvrq0hbhjx5di6qa3";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.2";
        edition = "2018";
        sha256 = "1mjl8jjqxpl0x7sm9cij61cppi7yi38cdrd1l8zjw7h7qxk2v9cd";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "1.6.1";
        edition = "2018";
        sha256 = "06b3sq2hd8qwl2xxlc4qalg6xw3l9b41w4sym9g0q70mf93dc511";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "event-listener";
            packageId = "event-listener";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
        ];

      };
      "async-io" = rec {
        crateName = "async-io";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0yv0xv7nhkdhyz9z5q1hq9bavlmkrysrd1q30h69yhzjg6jfc4d8";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = [ "all" ];
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winsock2" ];
          }
        ];

      };
      "async-net" = rec {
        crateName = "async-net";
        version = "1.6.1";
        edition = "2018";
        sha256 = "1psiqp553fhw116ww1kkh848c5y7kqv81c4g0sal76wvyx6k0wsk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];

      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.2.0";
        edition = "2018";
        sha256 = "1affldc0d5cfgsqsw74gvbl41qfm1479hjg05307y40pv226ls9h";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.53";
        edition = "2018";
        sha256 = "003nzwgwb2apz6nww5wmh66k8f47npifll8c33zgkz1d999a6spd";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.0.0";
        edition = "2018";
        sha256 = "0ansiq5vlw684fhks2x4a4is2rqlbv50q5mi8x0fxxvx5q2p8lq6";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1ylp3cb47ylzabimazvbz9ms6ap784zhb6syaz6c1jqpmcmq0s6l";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.7.3";
        edition = "2015";
        sha256 = "12v8wizynqin0hqf140kmp9s38q223mp1b0hkqk8j5pk8720v560";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1xbkmysiz23vimd17rnsjpw9bgjxipwfslwyygqlkx4in3dxwygs";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
        ];

      };
      "blocking" = rec {
        crateName = "blocking";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1k6ci9rflwr14izydrmvnfm0zab9xmyl714qns3a0y498rfvdk66";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];

      };
      "bstr" = rec {
        crateName = "bstr";
        version = "0.2.17";
        edition = "2018";
        sha256 = "08rjbhysy6gg27db2h3pnhvr2mlr5vkj797i9625kwg8hgrnjdds";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "unicode" ];
          "serde1" = [ "std" "serde1-nostd" "serde/std" ];
          "serde1-nostd" = [ "serde" ];
          "std" = [ "memchr/std" ];
          "unicode" = [ "lazy_static" "regex-automata" ];
        };
        resolvedDefaultFeatures = [ "lazy_static" "regex-automata" "std" "unicode" ];
      };
      "btoi" = rec {
        crateName = "btoi";
        version = "0.4.2";
        edition = "2015";
        sha256 = "04ba4j96icaan10c613s2rwpn2kdbl8728qhz2xzi0dakyd8dh4p";
        authors = [
          "Niklas Fiekas <niklas.fiekas@backscattering.de>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.4.3";
        edition = "2018";
        sha256 = "0456lv9xi1a5bcm32arknf33ikv76p3fr9yzki4lb2897p2qkh8l";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1y70b249m02lfp0j6565b29kviapj4xsl9whamcqwddnp9kjv1y4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytesize" = rec {
        crateName = "bytesize";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0w7wmmbcirxp5isza0i1lxq5d7r7f0z1pxbxl5f6s1n5m8vfqn3c";
        authors = [
          "Hyunsik Choi <hyunsik.choi@gmail.com>"
        ];

      };
      "cache-padded" = rec {
        crateName = "cache-padded";
        version = "1.2.0";
        edition = "2018";
        sha256 = "0b39fmvn6j47xcyc03biyh8kdd52qwhb55xmx72hj3y73ri5kny1";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "cargo-lock" = rec {
        crateName = "cargo-lock";
        version = "7.0.1";
        edition = "2018";
        crateBin = [];
        sha256 = "122wirj0d44xi2i7sc6anjimqfvgw5p5ry840zikc82vpn44pc3z";
        authors = [
          "Tony Arcieri <bascule@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "serde_derive" ];
          }
          {
            name = "toml";
            packageId = "toml";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "cli" = [ "gumdrop" "dependency-tree" ];
          "dependency-tree" = [ "petgraph" ];
        };
      };
      "cbitset" = rec {
        crateName = "cbitset";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0ss6hjrbpqlir2ad4z2db0sb4yg15w5rfax11pxmjq99mqjsvdi9";
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];

      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.73";
        edition = "2018";
        crateBin = [];
        sha256 = "04ccylrjq94jssh8f7d7hxv64gs9f1m1jrsxb7wqgfxk4xljmzrg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
          }
        ];
        features = {
          "parallel" = [ "jobserver" ];
        };
        resolvedDefaultFeatures = [ "jobserver" "parallel" ];
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "clap 2.34.0" = rec {
        crateName = "clap";
        version = "2.34.0";
        edition = "2018";
        sha256 = "071q5d8jfwbazi6zhik9xwpacx5i6kb2vkzy060vhf0c3120aqd0";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim 0.8.0";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap 0.11.0";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "clap 3.1.10" = rec {
        crateName = "clap";
        version = "3.1.10";
        edition = "2018";
        sha256 = "0aysd0yndxzi122g1r5gsgx49k1f9zif2hq0878j57p0bkvz691i";
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "strsim";
            packageId = "strsim 0.10.0";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap 0.15.0";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "cargo" = [ "lazy_static" ];
          "color" = [ "atty" "termcolor" ];
          "debug" = [ "clap_derive/debug" "backtrace" ];
          "default" = [ "std" "color" "suggestions" ];
          "derive" = [ "clap_derive" "lazy_static" ];
          "std" = [ "indexmap/std" ];
          "suggestions" = [ "strsim" ];
          "unicode" = [ "textwrap/unicode-width" "unicase" ];
          "unstable-doc" = [ "derive" "cargo" "wrap_help" "yaml" "env" "unicode" "regex" "unstable-replace" "unstable-multicall" "unstable-grouped" ];
          "wrap_help" = [ "terminal_size" "textwrap/terminal_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "atty" "clap_derive" "color" "default" "derive" "lazy_static" "std" "strsim" "suggestions" "termcolor" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "3.1.7";
        edition = "2018";
        sha256 = "1hck94hzb8h9gbgggiv95j6pj73dfm7f352pmyd80fq89rrv9am3";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.0";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0sb6jq722h33vrnyfa4iv6q3gaa22wvm8q38wwshp9rjblxxv78q";
        dependencies = [
          {
            name = "os_str_bytes";
            packageId = "os_str_bytes 6.0.0";
            usesDefaultFeatures = false;
            features = [ "raw_os_str" ];
          }
        ];

      };
      "clru" = rec {
        crateName = "clru";
        version = "0.5.0";
        edition = "2018";
        sha256 = "02hy88i8vagcb2gy7kxwjrsyvzg5q0rx477sfnll5r78vp9np391";
        authors = [
          "marmeladema <xademax@gmail.com>"
        ];

      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.3";
        edition = "2018";
        sha256 = "0qihymj493vvs054gzpcmp4lzb098zrj2p9miv19yzvrrjm2gdsh";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "pin-project" = [ "pin-project-lite" ];
          "std" = [ "memchr/use_std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "1.2.2";
        edition = "2018";
        sha256 = "18w6hblcjjk9d0my3657ra1zdj79gwfjmzvc0b3985g01dahgv9h";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "cache-padded";
            packageId = "cache-padded";
          }
        ];

      };
      "countme" = rec {
        crateName = "countme";
        version = "2.0.4";
        edition = "2018";
        sha256 = "0n6bzg2g6gsmgabyzbcfkyb9y9mzxsvavng85d04wkdsvhmq52rj";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "enable" = [ "dashmap" "once_cell" "rustc-hash" ];
          "print_at_exit" = [ "enable" ];
        };
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.3.2";
        edition = "2015";
        sha256 = "03c8f29yx293yf43xar946xbls1g60c207m9drf8ilqhr25vsh5m";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ctor" = rec {
        crateName = "ctor";
        version = "0.1.22";
        edition = "2018";
        sha256 = "1712zdlrmcfkfw38dkj67xg72fd0p9slyqqi64c6n94zgi7vwxzq";
        procMacro = true;
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "proc-macro" ];
          }
        ];

      };
      "dashmap 4.0.2" = rec {
        crateName = "dashmap";
        version = "4.0.2";
        edition = "2018";
        sha256 = "1773x18k5m2zw1iyibs8l3wl1p1aijdbrc0w844xys06inr46yp7";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "dashmap 5.2.0" = rec {
        crateName = "dashmap";
        version = "5.2.0";
        edition = "2018";
        sha256 = "172kdsmd1j7y8i1w2l42cdcv0ilw8ir9x8wyacp350bp3y1mi22c";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.0";
          }
        ];
        features = {
          "default" = [ "send_guard" ];
          "send_guard" = [ "parking_lot/send_guard" ];
        };
        resolvedDefaultFeatures = [ "default" "send_guard" ];
      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.12";
        edition = "2015";
        sha256 = "16b40bhsa2qgvgvxs983l625pkxyp6m0mzmpwg2605cvj53yl98f";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];

      };
      "digest" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "4.0.0";
        edition = "2015";
        sha256 = "0n8020zl4f0frfnzvgb9agvk4a14i1kjz4daqnxkgslndwmaffna";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];

      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.3.7";
        edition = "2015";
        sha256 = "19md1cnkazham8a6kh22v12d8hh3raqahfk6yb043vrjr68is78v";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];

      };
      "either" = rec {
        crateName = "either";
        version = "1.6.1";
        edition = "2015";
        sha256 = "0mwl9vngqf5jvrhmhn9x60kr5hivxyjxbmby2pybncxfqhf4z3g7";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "event-listener" = rec {
        crateName = "event-listener";
        version = "2.5.2";
        edition = "2018";
        sha256 = "0wgbyhw4piqrrln6s61y3sc06wd3liwzzz18hazji3wk2ya31wvp";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "fake-simd" = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1vfylvk4va2ivqx85603lyqqp0zk52cgbs4n5nfbbbqx577qm2p8";
        authors = [
          "The Rust-Crypto Project Developers"
        ];

      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "1.7.0";
        edition = "2018";
        sha256 = "1pvci54f2cm69ybc308z213xdybgqpvf2pcvq1kch69mwp7g1z63";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = { target, features }: (target."arch" == "wasm32");
          }
        ];
        devDependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = {target, features}: (target."arch" == "wasm32");
            features = [ "wasm-bindgen" ];
          }
        ];

      };
      "filebuffer" = rec {
        crateName = "filebuffer";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0193wnllaxj6n7xdmaar9s5vkcqlfq3m3sab12fylqs2szhvyh8v";
        authors = [
          "Ruud van Asseldonk <dev@veniogames.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "memoryapi" "processthreadsapi" "sysinfoapi" "winnt" ];
          }
        ];

      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.23";
        edition = "2018";
        sha256 = "1bq9vavadgqqr72z5bzbp952c4q67a71kfc4r55qzlw6cvlj55dk";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "emscripten")));
          }
        ];
        features = {
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "rust_backend" = [ "miniz_oxide" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
        };
        resolvedDefaultFeatures = [ "miniz_oxide" "rust_backend" ];
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.0.1";
        edition = "2018";
        sha256 = "1491fmakavcmsjbm3q6iy0bhmn9l422jasdhzx5hkljgza3mmhjz";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];

      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.21";
        edition = "2018";
        sha256 = "1lqhc6mqklh5bmkpr77p42lqwjj8gaskk5ba2p3kl1z4nw2gs28c";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.21";
        edition = "2018";
        sha256 = "0swn29fysas36ikk5aw55104fi98117amvgxw9g96pjs5ab4ah7w";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-lite" = rec {
        crateName = "futures-lite";
        version = "1.12.0";
        edition = "2018";
        sha256 = "0j5zzjcq1ib2kf1mm3apqf9g2ly1jjw1d1d4v9vjqi9rrnd4i53n";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "fastrand" "futures-io" "parking" "memchr" "waker-fn" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fastrand" "futures-io" "memchr" "parking" "std" "waker-fn" ];
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.12.4";
        edition = "2015";
        sha256 = "1gfpay78vijl9vrwl1k9v7fbvbhkhcmnrk4kfg9l6x24y4s9zpzz";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];

      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.2.6";
        edition = "2018";
        sha256 = "1b8588g2z36s1082licl623lclbdz9jp03gnz39bi0qwjnc0rrwv";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "js" = [ "wasm-bindgen" "js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "git-actor" = rec {
        crateName = "git-actor";
        version = "0.6.0";
        edition = "2018";
        sha256 = "12s8zdkk5kp1qkzar45h3xfcw2chjvchpy55v8hl5ks8v14spi09";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "btoi";
            packageId = "btoi";
          }
          {
            name = "itoa";
            packageId = "itoa 0.4.8";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "local-time-support" = [ "git-features/time" ];
          "serde1" = [ "serde" "bstr/serde1" ];
        };
      };
      "git-commitgraph" = rec {
        crateName = "git-commitgraph";
        version = "0.6.0";
        edition = "2018";
        sha256 = "17m5gajalmprxgaznl6g4as82hbl13p6izp6lgjkrvjvcc727j6a";
        authors = [
          "Conor Davis <gitoxide@conor.fastmail.fm>"
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "filebuffer";
            packageId = "filebuffer";
          }
          {
            name = "git-features";
            packageId = "git-features";
            features = [ "rustsha1" ];
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "serde1" = [ "serde" "git-hash/serde1" "bstr/serde1" ];
        };
      };
      "git-config" = rec {
        crateName = "git-config";
        version = "0.1.11";
        edition = "2018";
        sha256 = "0r582x7y7ngylhxhlhn52p6i1f28b70a17h78j4raci54fajfpgl";
        authors = [
          "Edward Shen <code@eddie.sh>"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "git-diff" = rec {
        crateName = "git-diff";
        version = "0.11.1";
        edition = "2018";
        sha256 = "1qxj01bp6m7almbkqh4nfxyjz1dm2g8yypxa2xy5rwi962d02kkx";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-object";
            packageId = "git-object";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];

      };
      "git-features" = rec {
        crateName = "git-features";
        version = "0.17.0";
        edition = "2018";
        sha256 = "07zq8rfm8w2czvmljn62rpa6bfyfjrzss2744ylbkfhrw3l2v4rr";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "prodash";
            packageId = "prodash";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "unit-bytes" "unit-human" ];
          }
          {
            name = "quick-error";
            packageId = "quick-error";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            rename = "rustsha1";
            optional = true;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
            optional = true;
          }
        ];
        features = {
          "crc32" = [ "crc32fast" ];
          "fast-sha1" = [ "sha-1" ];
          "io-pipe" = [ "bytes" ];
          "parallel" = [ "crossbeam-utils" "crossbeam-channel" "num_cpus" "jwalk" ];
          "progress" = [ "prodash" ];
          "zlib" = [ "flate2" "flate2/rust_backend" "quick-error" ];
          "zlib-ng-compat" = [ "flate2/zlib-ng-compat" ];
          "zlib-rust-backend" = [ "flate2/rust_backend" ];
        };
        resolvedDefaultFeatures = [ "crc32" "crc32fast" "default" "flate2" "prodash" "progress" "quick-error" "rustsha1" "walkdir" "zlib" ];
      };
      "git-hash" = rec {
        crateName = "git-hash";
        version = "0.8.0";
        edition = "2018";
        sha256 = "0kl62y0vz7h50gj570n64fg8q8lif8p8mpdnfn46mxs396f7nw4r";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "serde1" = [ "serde" ];
        };
      };
      "git-lock" = rec {
        crateName = "git-lock";
        version = "1.0.1";
        edition = "2018";
        sha256 = "1cphpi8yxa66pnggrnnh8y3gpg5v3z8623p1v04bx4yqqbkc1ii4";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "git-tempfile";
            packageId = "git-tempfile";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];

      };
      "git-object" = rec {
        crateName = "git-object";
        version = "0.15.1";
        edition = "2018";
        sha256 = "1v0i4kaq85xrzf59553xnbyi26jj1hq3jz50d04szr13nq6jgbv0";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" "unicode" ];
          }
          {
            name = "git-actor";
            packageId = "git-actor";
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-validate";
            packageId = "git-validate";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "serde1" = [ "serde" "bstr/serde1" "smallvec/serde" "git-hash/serde1" "git-actor/serde1" ];
          "verbose-object-parsing-errors" = [ "nom/std" ];
        };
      };
      "git-odb" = rec {
        crateName = "git-odb";
        version = "0.23.0";
        edition = "2018";
        sha256 = "03m9ipqgp5cmsg0cifawdrig8r9nb79azwcg8p1vfvs95klihwb0";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "btoi";
            packageId = "btoi";
          }
          {
            name = "git-features";
            packageId = "git-features";
            features = [ "rustsha1" "walkdir" "zlib" ];
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-object";
            packageId = "git-object";
          }
          {
            name = "git-pack";
            packageId = "git-pack";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "internal-testing-git-features-parallel" = [ "git-features/parallel" ];
        };
      };
      "git-pack" = rec {
        crateName = "git-pack";
        version = "0.13.0";
        edition = "2018";
        sha256 = "106ki4vvza187zgyzhdcng2vznf9kkdsaj72n61sgzbjsvg7xap8";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "btoi";
            packageId = "btoi";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytesize";
            packageId = "bytesize";
          }
          {
            name = "clru";
            packageId = "clru";
            optional = true;
          }
          {
            name = "dashmap";
            packageId = "dashmap 4.0.2";
          }
          {
            name = "filebuffer";
            packageId = "filebuffer";
          }
          {
            name = "git-diff";
            packageId = "git-diff";
          }
          {
            name = "git-features";
            packageId = "git-features";
            features = [ "crc32" "rustsha1" "progress" "zlib" ];
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-object";
            packageId = "git-object";
          }
          {
            name = "git-tempfile";
            packageId = "git-tempfile";
          }
          {
            name = "git-traverse";
            packageId = "git-traverse";
          }
          {
            name = "itoa";
            packageId = "itoa 0.4.8";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "uluru";
            packageId = "uluru";
            optional = true;
          }
        ];
        features = {
          "internal-testing-git-features-parallel" = [ "git-features/parallel" ];
          "object-cache-dynamic" = [ "clru" ];
          "pack-cache-lru-dynamic" = [ "clru" ];
          "pack-cache-lru-static" = [ "uluru" ];
          "serde1" = [ "serde" "git-object/serde1" ];
        };
        resolvedDefaultFeatures = [ "clru" "object-cache-dynamic" "pack-cache-lru-dynamic" "pack-cache-lru-static" "uluru" ];
      };
      "git-packetline" = rec {
        crateName = "git-packetline";
        version = "0.12.4";
        edition = "2018";
        sha256 = "07c8iaavyny6ckbz3hxzhrfhmbj8k3shprxmzzdwj3m7a4c2vmsx";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            optional = true;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "async-io" = [ "futures-io" "futures-lite" "pin-project-lite" ];
          "serde1" = [ "serde" "bstr/serde1" ];
        };
        resolvedDefaultFeatures = [ "async-io" "default" "futures-io" "futures-lite" "pin-project-lite" ];
      };
      "git-protocol" = rec {
        crateName = "git-protocol";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0kjg9h8qfg3gchp4k8rm80p42asrnpg6rc0ngkkvxw9xs2dmb2z4";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "btoi";
            packageId = "btoi";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            optional = true;
          }
          {
            name = "git-features";
            packageId = "git-features";
            features = [ "progress" ];
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-transport";
            packageId = "git-transport";
          }
          {
            name = "maybe-async";
            packageId = "maybe-async";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "async-client" = [ "git-transport/async-client" "async-trait" "futures-io" "futures-lite" ];
          "blocking-client" = [ "git-transport/blocking-client" "maybe-async/is_sync" ];
          "serde1" = [ "serde" "bstr/serde1" "git-transport/serde1" "git-hash/serde1" ];
        };
        resolvedDefaultFeatures = [ "async-client" "async-trait" "futures-io" "futures-lite" ];
      };
      "git-ref" = rec {
        crateName = "git-ref";
        version = "0.9.1";
        edition = "2018";
        sha256 = "05risrmva8nlbsr91ridpn1q29fhinqlyywbwwf6zk7v50jib1kg";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "filebuffer";
            packageId = "filebuffer";
          }
          {
            name = "git-actor";
            packageId = "git-actor";
          }
          {
            name = "git-features";
            packageId = "git-features";
            features = [ "walkdir" ];
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-lock";
            packageId = "git-lock";
          }
          {
            name = "git-object";
            packageId = "git-object";
          }
          {
            name = "git-tempfile";
            packageId = "git-tempfile";
          }
          {
            name = "git-validate";
            packageId = "git-validate";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "os_str_bytes";
            packageId = "os_str_bytes 3.1.0";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "internal-testing-git-features-parallel" = [ "git-features/parallel" ];
          "serde1" = [ "serde" "git-hash/serde1" "git-actor/serde1" "git-object/serde1" ];
        };
      };
      "git-repository" = rec {
        crateName = "git-repository";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1kj70l2qsxicg0if7b3hh28k47c64cxygk8h3sglbws3f9vhfkz3";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "clru";
            packageId = "clru";
          }
          {
            name = "git-actor";
            packageId = "git-actor";
          }
          {
            name = "git-config";
            packageId = "git-config";
          }
          {
            name = "git-diff";
            packageId = "git-diff";
            optional = true;
          }
          {
            name = "git-features";
            packageId = "git-features";
            features = [ "progress" ];
          }
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-lock";
            packageId = "git-lock";
          }
          {
            name = "git-object";
            packageId = "git-object";
          }
          {
            name = "git-odb";
            packageId = "git-odb";
          }
          {
            name = "git-pack";
            packageId = "git-pack";
            features = [ "object-cache-dynamic" ];
          }
          {
            name = "git-protocol";
            packageId = "git-protocol";
            optional = true;
          }
          {
            name = "git-ref";
            packageId = "git-ref";
          }
          {
            name = "git-tempfile";
            packageId = "git-tempfile";
          }
          {
            name = "git-traverse";
            packageId = "git-traverse";
          }
          {
            name = "git-url";
            packageId = "git-url";
            optional = true;
          }
          {
            name = "git-validate";
            packageId = "git-validate";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
            features = [ "arc_lock" ];
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "signal-hook";
            packageId = "signal-hook";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-network-client" = [ "git-protocol/async-client" ];
          "blocking-http-transport" = [ "git-transport/http-client-curl" ];
          "blocking-network-client" = [ "git-protocol/blocking-client" ];
          "cache-efficiency-debug" = [ "git-features/cache-efficiency-debug" ];
          "default" = [ "max-performance" "one-stop-shop" ];
          "local" = [ "git-url" "git-diff" ];
          "local-time-support" = [ "git-actor/local-time-support" ];
          "max-performance" = [ "git-features/parallel" "git-features/zlib-ng-compat" "git-pack/pack-cache-lru-static" "git-pack/pack-cache-lru-dynamic" ];
          "one-stop-shop" = [ "local" "local-time-support" ];
          "serde1" = [ "git-pack/serde1" "git-object/serde1" "git-protocol/serde1" "git-transport/serde1" "git-ref/serde1" ];
        };
        resolvedDefaultFeatures = [ "async-network-client" "git-diff" "git-protocol" "git-url" "local" "unstable" ];
      };
      "git-tempfile" = rec {
        crateName = "git-tempfile";
        version = "1.0.6";
        edition = "2018";
        sha256 = "0swwsxyf91bj85k4l71j061s509y4ghdp116shfbmcwalv47hvfg";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "dashmap";
            packageId = "dashmap 5.2.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "race" "std" ];
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
            usesDefaultFeatures = false;
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];

      };
      "git-transport" = rec {
        crateName = "git-transport";
        version = "0.13.1";
        edition = "2018";
        sha256 = "0wr4xwh2baa9slxblc4ipwnrqidb0jddp8hacxqj05rscw4hsb3d";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            optional = true;
          }
          {
            name = "git-features";
            packageId = "git-features";
          }
          {
            name = "git-packetline";
            packageId = "git-packetline";
          }
          {
            name = "git-url";
            packageId = "git-url";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "async-client" = [ "git-packetline/async-io" "async-trait" "futures-lite" "futures-io" "pin-project-lite" ];
          "blocking-client" = [ "git-packetline/blocking-io" ];
          "http-client-curl" = [ "curl" "base64" "git-features/io-pipe" "blocking-client" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "async-client" "async-trait" "default" "futures-io" "futures-lite" "pin-project-lite" ];
      };
      "git-traverse" = rec {
        crateName = "git-traverse";
        version = "0.10.1";
        edition = "2018";
        sha256 = "12h84sgina95pv773a14xz10sy46x0645qnxf3mxw9a5ryv3b89s";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "git-hash";
            packageId = "git-hash";
          }
          {
            name = "git-object";
            packageId = "git-object";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];

      };
      "git-url" = rec {
        crateName = "git-url";
        version = "0.3.5";
        edition = "2018";
        sha256 = "1y4nkm63474mdazy3ymamwn63v5b890k5q2g3rgcagczcy6ciz6r";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "serde1" = [ "serde" "bstr/serde1" ];
        };
      };
      "git-validate" = rec {
        crateName = "git-validate";
        version = "0.5.3";
        edition = "2018";
        sha256 = "1p0130i11ndnqr24qmh3gyscsqnxh8qq4ivwk6amlibgrp3az2y5";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];

      };
      "git2" = rec {
        crateName = "git2";
        version = "0.14.2";
        edition = "2018";
        sha256 = "0g4ydsshmb3a4ad96ss7ydrr55i384jckixzq90plp91wbhac9iq";
        authors = [
          "Josh Triplett <josh@joshtriplett.org>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libgit2-sys";
            packageId = "libgit2-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(target."os" == "macos")));
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(target."os" == "macos")));
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "default" = [ "ssh" "https" "ssh_key_from_memory" ];
          "https" = [ "libgit2-sys/https" "openssl-sys" "openssl-probe" ];
          "ssh" = [ "libgit2-sys/ssh" ];
          "ssh_key_from_memory" = [ "libgit2-sys/ssh_key_from_memory" ];
          "vendored-libgit2" = [ "libgit2-sys/vendored" ];
          "vendored-openssl" = [ "openssl-sys/vendored" "libgit2-sys/vendored-openssl" ];
          "zlib-ng-compat" = [ "libgit2-sys/zlib-ng-compat" ];
        };
        resolvedDefaultFeatures = [ "default" "https" "openssl-probe" "openssl-sys" "ssh" "ssh_key_from_memory" ];
      };
      "gitoxide-core" = rec {
        crateName = "gitoxide-core";
        version = "0.12.0";
        edition = "2018";
        sha256 = "1bvbcw2rflwh2byzawscq947brpy9carmwv6kws0a4vx2p9gp45z";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-io";
            packageId = "async-io";
            optional = true;
          }
          {
            name = "async-net";
            packageId = "async-net";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "blocking";
            packageId = "blocking";
            optional = true;
          }
          {
            name = "bytesize";
            packageId = "bytesize";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            optional = true;
          }
          {
            name = "git-commitgraph";
            packageId = "git-commitgraph";
          }
          {
            name = "git-config";
            packageId = "git-config";
          }
          {
            name = "git-pack";
            packageId = "git-pack";
            rename = "git-pack-for-configuration-only";
            usesDefaultFeatures = false;
            features = [ "pack-cache-lru-dynamic" "pack-cache-lru-static" ];
          }
          {
            name = "git-repository";
            packageId = "git-repository";
            usesDefaultFeatures = false;
            features = [ "local" "unstable" ];
          }
          {
            name = "os_str_bytes";
            packageId = "os_str_bytes 3.1.0";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "async-client" = [ "git-repository/async-network-client" "async-trait" "futures-io" "async-net" "async-io" "futures-lite" "blocking" ];
          "blocking-client" = [ "git-repository/blocking-network-client" ];
          "estimate-hours" = [ "itertools" "rayon" "fs-err" ];
          "local-time-support" = [ "git-repository/local-time-support" ];
          "organize" = [ "git-url" "jwalk" ];
          "serde1" = [ "git-commitgraph/serde1" "git-repository/serde1" "serde_json" "serde" ];
        };
        resolvedDefaultFeatures = [ "async-client" "async-io" "async-net" "async-trait" "blocking" "default" "futures-io" "futures-lite" ];
      };
      "handlebars" = rec {
        crateName = "handlebars";
        version = "4.2.2";
        edition = "2021";
        crateBin = [];
        sha256 = "0sy5c95idi2db7bvmsx1sql33lisfsy9a0qm8l17357h401s7mlr";
        authors = [
          "Ning Sun <sunng@pm.me>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "dir_source" = [ "walkdir" ];
          "script_helper" = [ "rhai" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hashbrown 0.11.2" = rec {
        crateName = "hashbrown";
        version = "0.11.2";
        edition = "2018";
        sha256 = "0vkjsf5nzs7qcia5ya79j9sq2p1caz4crrncr1675wwyj3ag0pmb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "default" = [ "ahash" "inline-more" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.9.1" = rec {
        crateName = "hashbrown";
        version = "0.9.1";
        edition = "2018";
        sha256 = "016dsm9s4xmxlkw2jfikm54qlz6vyk0qr280gab7kzp342jf9byp";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "default" = [ "ahash" "inline-more" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
        };
        resolvedDefaultFeatures = [ "inline-more" ];
      };
      "heck 0.3.3" = rec {
        crateName = "heck";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0b0kkr790p66lvzn9nsmfjvydrbmh9z5gb664jchwgw64vxiwqkd";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "heck 0.4.0" = rec {
        crateName = "heck";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1ygphsnfwl2xpa211vbqkz1db6ri1kvkg8p8sqybi37wclg7fh15";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.19";
        edition = "2018";
        sha256 = "0cxcm8093nf5fyn114w8vxbrbcyvv91d4015rdnlgfll7cs6gd32";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "holochain-nixpkgs-util" = rec {
        crateName = "holochain-nixpkgs-util";
        version = "0.0.1";
        edition = "2021";
        crateBin = [
          { name = "holochain-nixpkgs-util"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ../../crates/holochain-nixpkgs-util; };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap 3.1.10";
            features = [ "derive" ];
          }
          {
            name = "git-transport";
            packageId = "git-transport";
            features = [ "async-client" ];
          }
          {
            name = "git2";
            packageId = "git2";
          }
          {
            name = "gitoxide-core";
            packageId = "gitoxide-core";
            features = [ "async-client" ];
          }
          {
            name = "indoc";
            packageId = "indoc";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
          {
            name = "linked_hash_set";
            packageId = "linked_hash_set";
          }
          {
            name = "prodash";
            packageId = "prodash";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.14.2";
            features = [ "serde" "easy" ];
          }
          {
            name = "update-holochain-versions";
            packageId = "update-holochain-versions";
          }
        ];

      };
      "home" = rec {
        crateName = "home";
        version = "0.5.3";
        edition = "2018";
        sha256 = "0m3nfcksrj784liji1c5j47dymxw2l7hqy5fj90piadnwvrawmi4";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "shlobj" "std" "winerror" ];
          }
        ];

      };
      "human_format" = rec {
        crateName = "human_format";
        version = "1.0.3";
        edition = "2015";
        sha256 = "1c3w2lm41gmnd82acjsi6y50ym2sh5fdb6abghysmaaqsxhf5k46";
        authors = [
          "Bob Chatman <bob.chatman@gmail.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "0.2.3";
        edition = "2018";
        sha256 = "1y7ca2w5qp9msgl57n03zqp78gq1bk2crqzg6kv7a542mdphm2j1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];

      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.8.1";
        edition = "2018";
        sha256 = "1vpnb7yq9ckdil8vnzh0p2w62j7gpfvyvlwvq9nqn7xavwr70r0g";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.11.2";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "indoc" = rec {
        crateName = "indoc";
        version = "1.0.4";
        edition = "2018";
        sha256 = "17iwlax2kkdjgdwk6bij2vlqvld1jzj1097pfjvsrbmbmfgnm477";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "unindent";
            packageId = "unindent";
          }
        ];

      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0b2bx5qdlwayriidhrag8vhy10kdfimfhmb3jnjmsz2h9j1bwnvs";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
        };
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.10.3";
        edition = "2018";
        sha256 = "1qy55fqbaisr9qgbn7cvdvqlfqbh1f4ddf99zwan56z7l6gx3ad9";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa 0.4.8" = rec {
        crateName = "itoa";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1m1dairwyx8kfxi7ab3b5jc71z1vigh9w4shnhiajji9avzr26dp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "itoa 1.0.1" = rec {
        crateName = "itoa";
        version = "1.0.1";
        edition = "2018";
        sha256 = "0d8wr2qf5b25a04xf10rz9r0pdbjdgb0zaw3xvf8k2sqcz1qzaqs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.24";
        edition = "2018";
        sha256 = "1yn1vxbbqv7dqir6qbfcj8h8ddjf89m5mhvm36h13xx7k5raf9dg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "json5" = rec {
        crateName = "json5";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1h9hni897zmn3vcixfbwwkj2gkz27h7z9dah8bk1qv37mwhxpc4n";
        authors = [
          "Callum Oakley <hello@callumoakley.net>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "kstring" = rec {
        crateName = "kstring";
        version = "1.0.6";
        edition = "2018";
        sha256 = "09j5xb3rnjd3kmc2v667wzsc4mz4c1hl1vkzszbj30fyxb60qccb";
        authors = [
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "default" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "max_inline" "serde" ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.124";
        edition = "2015";
        sha256 = "0l0f1gvhxp9xpx5w5bd8aj55x8sg59idlqfiqsqpmwlqkpniz911";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libgit2-sys" = rec {
        crateName = "libgit2-sys";
        version = "0.13.2+1.4.2";
        edition = "2018";
        sha256 = "12r5dy45v42yc67qwj0qcky84dd45syack0fzh02xhd5a6ddwhis";
        libName = "libgit2_sys";
        libPath = "lib.rs";
        authors = [
          "Josh Triplett <josh@joshtriplett.org>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libssh2-sys";
            packageId = "libssh2-sys";
            optional = true;
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            usesDefaultFeatures = false;
            features = [ "libc" ];
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "https" = [ "openssl-sys" ];
          "ssh" = [ "libssh2-sys" ];
          "vendored-openssl" = [ "openssl-sys/vendored" ];
          "zlib-ng-compat" = [ "libz-sys/zlib-ng" "libssh2-sys/zlib-ng-compat" ];
        };
        resolvedDefaultFeatures = [ "https" "libssh2-sys" "openssl-sys" "ssh" "ssh_key_from_memory" ];
      };
      "libssh2-sys" = rec {
        crateName = "libssh2-sys";
        version = "0.2.23";
        edition = "2015";
        sha256 = "1jplndqhlsygjmsni1ydb4zbw0j5jjr47bmqnjkwif5qnipa755h";
        libName = "libssh2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Wez Furlong <wez@wezfurlong.org>"
          "Matteo Bigoi <bigo@crisidev.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            usesDefaultFeatures = false;
            features = [ "libc" ];
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "openssl-on-win32" = [ "openssl-sys" ];
          "vendored-openssl" = [ "openssl-sys/vendored" ];
          "zlib-ng-compat" = [ "libz-sys/zlib-ng" ];
        };
      };
      "libz-sys" = rec {
        crateName = "libz-sys";
        version = "1.1.5";
        edition = "2015";
        sha256 = "0ngqbc6p5b31f2mkq4dlkk4w2dj23nzf4aw291dcnwsn9b6zldbg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "default" = [ "libc" "stock-zlib" ];
          "zlib-ng" = [ "libc" "cmake" ];
        };
        resolvedDefaultFeatures = [ "libc" ];
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.4";
        edition = "2015";
        sha256 = "1ww8zsraqnvrsknd315481185igwkx5n14xnhq5i8216z65b7fbz";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize_impl" = [ "heapsize" ];
          "serde_impl" = [ "serde" "serde_test" ];
        };
      };
      "linked_hash_set" = rec {
        crateName = "linked_hash_set";
        version = "0.1.4";
        edition = "2018";
        sha256 = "124m7wiz9ah7ah58ckai413mzfglh3y1nz64qy1s676qlinnq627";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];

      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.7";
        edition = "2018";
        sha256 = "0lwckl9l51y69bwf854kmdmmr1543spbxaa9xjclc3lllsvaazrj";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "arc_lock" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.16";
        edition = "2015";
        sha256 = "1f62871i8phpphfk9chr5s4wia8kr55y4nlhpqbbrxczhj8c92b3";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable" = [ "value-bag" ];
          "kv_unstable_serde" = [ "kv_unstable_std" "value-bag/serde" "serde" ];
          "kv_unstable_std" = [ "std" "kv_unstable" "value-bag/error" ];
          "kv_unstable_sval" = [ "kv_unstable" "value-bag/sval" "sval" ];
        };
      };
      "maplit" = rec {
        crateName = "maplit";
        version = "1.0.2";
        edition = "2015";
        sha256 = "07b5kjnhrrmfhgqm9wprjw8adx6i225lqp49gasgqg74lahnabiy";
        authors = [
          "bluss"
        ];

      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0gw5ib38jfgyyah8nyyxr036grqv1arkf1srgfa4h386dav7iqx3";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "maybe-async" = rec {
        crateName = "maybe-async";
        version = "0.2.6";
        edition = "2018";
        sha256 = "1rmw6aq2waslmdd74168vahcza7wd7b9k9bwy8ja5q28s3dgj1v0";
        procMacro = true;
        authors = [
          "Guoli Lyu <guoli-lv@hotmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit-mut" "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.4.1";
        edition = "2018";
        sha256 = "0smq8xzd40njqpfzv5mghigj91fzlfrfg842iz8x0wqvw2dw731h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "use_std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1kkrzll58a3ayn5zdyy9i1f1v3mx0xgl29x0chq614zazba638ss";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.5.1";
        edition = "2018";
        sha256 = "10phz3ppw4p8pz4rwniy3qkw95wiq64kbvpb0l8kjcrzpka9pcnj";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" "simd-adler32/std" ];
          "simd" = [ "simd-adler32" ];
        };
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.1";
        edition = "2018";
        sha256 = "0djc3lq5xihnwhrvkc4bj0fd58sjf632yh6hfiw545x355d3x458";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.14";
        edition = "2015";
        sha256 = "144j176s2p76azy2ngk2vkdzgwdc0bc8c93jhki8c9fsbknb2r4s";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.13.1";
        edition = "2015";
        sha256 = "18apx62z4j4lajj2fi6r1i8slr9rs2d0xrbj2ls85qfyxck4brhr";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.10.0";
        edition = "2018";
        sha256 = "1fgclb93az22gq5lmqsm84kilx1p1xpij559bmvx2mn1x8vy1ww7";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1kq18qm48rvkwgcggfkqq6pm948190czqc94d6bm2sir5hq1l0gz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.72";
        edition = "2015";
        sha256 = "1jq3qbcvf16qn71yasdzw54b14n8nz98vr52l1gp60in72f10iky";
        build = "build/main.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "vendored" = [ "openssl-src" ];
        };
      };
      "os_str_bytes 3.1.0" = rec {
        crateName = "os_str_bytes";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0bfgm53jgdacylwd6ynjhciczmnlrp45p98h0nsrmrhglrcfzjva";
        authors = [
          "dylni"
        ];
        features = {
        };
      };
      "os_str_bytes 6.0.0" = rec {
        crateName = "os_str_bytes";
        version = "6.0.0";
        edition = "2018";
        sha256 = "0r5z5xds2wzzqlqjaw96dpjsz5nqyzc1rflm4mh09aa32qyl88lf";
        authors = [
          "dylni"
        ];
        features = {
          "default" = [ "memchr" "raw_os_str" ];
        };
        resolvedDefaultFeatures = [ "raw_os_str" ];
      };
      "output_vt100" = rec {
        crateName = "output_vt100";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0rpvpiq7gkyvvwyp9sk0zxhbk99ldlrv5q3ycr03wkmbxgx270k2";
        authors = [
          "Phuntsok Drak-pa <phundrak@phundrak.fr>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "winuser" "winbase" "consoleapi" "processenv" ];
          }
        ];

      };
      "parking" = rec {
        crateName = "parking";
        version = "2.0.0";
        edition = "2018";
        sha256 = "0wnxxnizfxlax3n709s5r83f4n8awy3m4a18q4fdk0z7z693hz22";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];

      };
      "parking_lot 0.11.2" = rec {
        crateName = "parking_lot";
        version = "0.11.2";
        edition = "2018";
        sha256 = "16gzf41bxmm10x82bla8d6wfppy9ym3fxsmdjyvn61m66s0bf5vx";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.8.5";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
          "stdweb" = [ "instant/stdweb" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "arc_lock" "default" ];
      };
      "parking_lot 0.12.0" = rec {
        crateName = "parking_lot";
        version = "0.12.0";
        edition = "2018";
        sha256 = "0n7gp0cnfghglc370cxhawwfijvhj3wrjh8gdi8c06m6jcjfrxc7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.2";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" "send_guard" ];
      };
      "parking_lot_core 0.8.5" = rec {
        crateName = "parking_lot_core";
        version = "0.8.5";
        edition = "2018";
        sha256 = "05ij4zxsylx99srbq8qd1k2wiwaq8krkf9y4cqkhvb5wjca8wvnp";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "parking_lot_core 0.9.2" = rec {
        crateName = "parking_lot_core";
        version = "0.9.2";
        edition = "2018";
        sha256 = "0dxbggwcbbds5zys68mrl7py5w42aph1ihis8fq008l2dix6cpwr";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_LibraryLoader" "Win32_System_SystemServices" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];

      };
      "pest" = rec {
        crateName = "pest";
        version = "2.1.3";
        edition = "2015";
        sha256 = "0lry80bm90x47nq71wxq83kjrm9ashpz4kbm92p90ysdx4m8gx0h";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
          }
        ];
        features = {
          "pretty-print" = [ "serde" "serde_json" ];
        };
      };
      "pest_derive" = rec {
        crateName = "pest_derive";
        version = "2.1.0";
        edition = "2015";
        sha256 = "1l5jfa6ril71cw5nsiw0r45br54dd8cj2r1nc2d1wq6wb3jilgc3";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_generator";
            packageId = "pest_generator";
          }
        ];

      };
      "pest_generator" = rec {
        crateName = "pest_generator";
        version = "2.1.3";
        edition = "2015";
        sha256 = "0mfgl0p6v91ywdqr9i8w053v70cnfqjk8y5rhwbvir9idridpf4r";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_meta";
            packageId = "pest_meta";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "pest_meta" = rec {
        crateName = "pest_meta";
        version = "2.1.3";
        edition = "2015";
        sha256 = "07d1jbbbpxpchk0j37ljas46sdyyg599z3zw2ac0f5sk9x06xgjl";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "pest";
            packageId = "pest";
          }
        ];
        buildDependencies = [
          {
            name = "sha-1";
            packageId = "sha-1";
            usesDefaultFeatures = false;
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0v2c5ds2jqr84q0nc94dfhv8fs7lachl9sarf9992b66gkkzp072";

      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.25";
        edition = "2015";
        sha256 = "1bh3vij79cshj884py4can1f8rvk52niaii1vwxya9q69gnc9y0x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "polling" = rec {
        crateName = "polling";
        version = "2.2.0";
        edition = "2018";
        sha256 = "0najvslgg2zclsnxay071jdw0bna7f0abqvgx3isv7w817ah8m38";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || (target."os" == "fuchsia") || (target."os" == "vxworks"));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "wepoll-ffi";
            packageId = "wepoll-ffi";
            target = { target, features }: (target."windows" or false);
            features = [ "null-overlapped-wakeups-patch" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "ioapiset" "winsock2" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pretty_assertions" = rec {
        crateName = "pretty_assertions";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0qrmkdwqn56af498vi8zjyq44wzcyvj5ic1dv54d01s2r6d9i7y8";
        authors = [
          "Colin Kiegel <kiegel@gmx.de>"
          "Florent Fayolle <florent.fayolle69@gmail.com>"
          "Tom Milligan <code@tommilligan.net>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
          }
          {
            name = "ctor";
            packageId = "ctor";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "output_vt100";
            packageId = "output_vt100";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.37";
        edition = "2018";
        sha256 = "1ldg6l97xlr4dal4kmk0c4l8kn7nn8w1a17wd8hdlpwd8cc74xgc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "prodash" = rec {
        crateName = "prodash";
        version = "16.1.3";
        edition = "2018";
        sha256 = "05s374p9zfgicnp8iljv414wasy1fd5kyg2p2bh635q35fw2if3r";
        authors = [
          "Sebastian Thiel <sebastian.thiel@icloud.com>"
        ];
        dependencies = [
          {
            name = "bytesize";
            packageId = "bytesize";
            optional = true;
          }
          {
            name = "dashmap";
            packageId = "dashmap 5.2.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "human_format";
            packageId = "human_format";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.11.2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "progress-tree" "progress-tree-log" ];
          "local-time" = [ "time" ];
          "progress-log" = [ "log" ];
          "progress-tree" = [ "dashmap" "parking_lot" ];
          "progress-tree-log" = [ "log" ];
          "render-line" = [ "crosstermion/color" "humantime" "unicode-width" ];
          "render-line-autoconfigure" = [ "atty" ];
          "render-line-crossterm" = [ "crosstermion/crossterm" ];
          "render-line-termion" = [ "crosstermion/termion" ];
          "render-tui" = [ "tui" "unicode-segmentation" "unicode-width" "crosstermion/input-async" "tui-react" "futures-lite" "futures-core" "async-io" "humantime" ];
          "render-tui-crossterm" = [ "crosstermion/tui-react-crossterm" "crosstermion/input-async-crossterm" ];
          "render-tui-termion" = [ "crosstermion/tui-react-termion" ];
          "unit-bytes" = [ "bytesize" ];
          "unit-duration" = [ "compound_duration" ];
          "unit-human" = [ "human_format" ];
        };
        resolvedDefaultFeatures = [ "bytesize" "dashmap" "default" "human_format" "log" "parking_lot" "progress-tree" "progress-tree-log" "unit-bytes" "unit-human" ];
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "2.0.1";
        edition = "2018";
        sha256 = "18z6r2rcjvvf8cn92xjhm2qc3jpd1ljvcbf12zv0k9p565gmb4x9";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];

      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.18";
        edition = "2018";
        sha256 = "1lca4xnwdc2sp76bf4n50kifmi5phhxr9520w623mfcksr7bbzm1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.2.13";
        edition = "2018";
        sha256 = "0hpgwvgjlg1j9z7bjf5y18fkd8ag7y4znhqxg85hnpp5qz25pwk2";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];

      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0asw3s4iy69knafkhvlbchy230qawc297vddjdwjs5nglwvxhcxh";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            features = [ "std" ];
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "auth" = [ "rust-argon2" "zeroize" ];
          "default" = [ "auth" ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.5.5";
        edition = "2018";
        sha256 = "11kjfh41h7i33sskb8i36kl03260rrjw74nb2njhbzr5ddxn848s";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.25";
        edition = "2018";
        sha256 = "16y87hz1bxmmz6kk360cxwfm3jnbsxb3x4zw9x1gzz7khic2i5zl";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1rzqbsgkmr053bxxl04vmvsd1njyz0nxvly97aip6aa2cmb15k9s";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];

      };
      "rnix" = rec {
        crateName = "rnix";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0dvapfpby8j2s3j9nyf9fp508qi6j3r2v88hdkcrdi2qiysfqjr9";
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        dependencies = [
          {
            name = "cbitset";
            packageId = "cbitset";
          }
          {
            name = "rowan";
            packageId = "rowan";
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
        ];

      };
      "rowan" = rec {
        crateName = "rowan";
        version = "0.12.6";
        edition = "2018";
        sha256 = "0hq0892cvasxrrnlba962x2znc6zrfqish91r2qg60ipkx26xcx1";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "countme";
            packageId = "countme";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.9.1";
            usesDefaultFeatures = false;
            features = [ "inline-more" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "text-size";
            packageId = "text-size";
          }
        ];
        features = {
          "serde1" = [ "serde" "text-size/serde" ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.9";
        edition = "2018";
        sha256 = "17qlxkqm4h8h9xqj6rh2vnmwxyzikbsj5w223chmr5l2qx8bgd3k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.7";
        edition = "2018";
        sha256 = "1i1ca3q9y08kfm4hhkk0r9xd4j3z511r4nyr4b99cwdy927x4nyn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.136";
        edition = "2015";
        sha256 = "12a791cbdd3gi08536i4frrqsps0ak8gvhpijvgj9rg1055y4cff";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.136";
        edition = "2015";
        sha256 = "1yb28smlymba4qbj2bn4c4myvblypqvkxv9q33s0dlzwa9qpwn88";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.79";
        edition = "2018";
        sha256 = "158xd1swdvw6y59bx4avb8vdpj727n54r77xw5f7c15kqfjrz3cf";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa 1.0.1";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "preserve_order" = [ "indexmap" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_yaml" = rec {
        crateName = "serde_yaml";
        version = "0.8.23";
        edition = "2018";
        sha256 = "1857pykxavramvf4p9bp40b3sqwrhnm8dqjfl9jw3183jkr239d4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "yaml-rust";
            packageId = "yaml-rust";
          }
        ];

      };
      "sha-1" = rec {
        crateName = "sha-1";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1pv387q0r7llk2cqzyq0nivzvkgqgzsiygqzlv7b68z9xl5lvngp";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "asm-aarch64" = [ "asm" "libc" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0w1p0s9060cv1vlgfa5c93kjksmvzjjc8j780lns3jj5fk4hbnn1";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "sha1_smol";
            packageId = "sha1_smol";
          }
        ];
        features = {
          "serde" = [ "sha1_smol/serde" ];
          "std" = [ "sha1_smol/std" ];
        };
      };
      "sha1_smol" = rec {
        crateName = "sha1_smol";
        version = "1.0.0";
        edition = "2018";
        sha256 = "04nhbhvsk5ms1zbshs80iq5r1vjszp2xnm9f0ivj38q3dhc4f6mf";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
        };
      };
      "signal-hook" = rec {
        crateName = "signal-hook";
        version = "0.3.13";
        edition = "2018";
        sha256 = "0bdzvax49hm0d3s59j062cznhbkznpylzdsv93mdq1qh4zgrfz34";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Thomas Himmelstoss <thimm@posteo.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
          }
        ];
        features = {
          "default" = [ "channel" "iterator" ];
          "extended-siginfo" = [ "channel" "iterator" "extended-siginfo-raw" ];
          "extended-siginfo-raw" = [ "cc" ];
          "iterator" = [ "channel" ];
        };
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.0";
        edition = "2015";
        sha256 = "1c2mhijg54y6c1zi4630yki1vpq3z96ljfnsrdy0rb64ilr767p5";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.6";
        edition = "2018";
        sha256 = "0cmvcy9ppsh3dz8mi6jljx7bxyknvgpas4aid2ayxk1vjpz3qw7b";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.8.0";
        edition = "2018";
        sha256 = "10zf4fn63p2d6sx8qap3jvyarcfw563308x3431hd4c34r35gpgj";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "const_new" = [ "const_generics" ];
        };
      };
      "smol_str" = rec {
        crateName = "smol_str";
        version = "0.1.21";
        edition = "2018";
        sha256 = "1gb14a85k6mzpn6s78flwvfl5vy1czsrzlwcgidy7k00wf1mrlb1";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.4.4";
        edition = "2018";
        sha256 = "1q71bsw7sqr3nq71gszywgymxxfv311a3w1aia4k5binjisjpmv6";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "strsim 0.10.0" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "strsim 0.8.0" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];

      };
      "structopt" = rec {
        crateName = "structopt";
        version = "0.3.26";
        edition = "2018";
        sha256 = "043sg3qxllann6q9i71d05qp3q13scmcvhxhd950ka2v8ij5qsqc";
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
          "others"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap 2.34.0";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "structopt-derive";
            packageId = "structopt-derive";
          }
        ];
        features = {
          "color" = [ "clap/color" ];
          "debug" = [ "clap/debug" ];
          "default" = [ "clap/default" ];
          "doc" = [ "clap/doc" ];
          "lints" = [ "clap/lints" ];
          "no_cargo" = [ "clap/no_cargo" ];
          "paw" = [ "structopt-derive/paw" "paw_dep" ];
          "suggestions" = [ "clap/suggestions" ];
          "wrap_help" = [ "clap/wrap_help" ];
          "yaml" = [ "clap/yaml" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "structopt-derive" = rec {
        crateName = "structopt-derive";
        version = "0.4.18";
        edition = "2018";
        sha256 = "1q5gcigmvw0cinjxzpyrkflliq5r1ivljmrvfrl3phcwgwraxdfw";
        procMacro = true;
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.3.3";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
        };
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.91";
        edition = "2018";
        sha256 = "0kflvi0r456s42n3z0d5snilsab2q9ns0dkwnwwg9vn84nwb50xn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "full" "parsing" "printing" "proc-macro" "quote" "visit-mut" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.3.0";
        edition = "2018";
        sha256 = "1r3rdp66f7w075mz6blh244syr3h0lbm07ippn7xrbgfxbs1xnsw";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || (target."os" == "wasi"));
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        features = {
        };
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.1.3";
        edition = "2018";
        sha256 = "0mbpflskhnz3jf312k50vn0hqbql8ga2rk0k79pkgchip4q4vcms";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "text-size" = rec {
        crateName = "text-size";
        version = "1.1.0";
        edition = "2018";
        sha256 = "02jn26l5wcdjqpy80ycnk9ha10flyc0p4yga8ci6aaz7vd4bb318";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
          "Christopher Durham (CAD97) <cad97@cad97.com>"
        ];

      };
      "textwrap 0.11.0" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];

      };
      "textwrap 0.15.0" = rec {
        crateName = "textwrap";
        version = "0.15.0";
        edition = "2018";
        sha256 = "1yw513k61lfiwgqrfvsjw1a5wpvm0azhpjr2kr0jhnq9c56is55i";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        features = {
          "default" = [ "unicode-linebreak" "unicode-width" "smawk" ];
        };
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.30";
        edition = "2018";
        sha256 = "05y4wm29ck8flwq5k1q6nhwh00a3b30cz3xr0qvnbwad5vjsnjw5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.30";
        edition = "2018";
        sha256 = "0jviwmvx6wzawsj6c9msic7h419wmsbjagl9dzhpydkzc8zzscma";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.5.1";
        edition = "2018";
        sha256 = "1lnqnva56673r0d40586rkzyl2qqcz19wm29q8h5a95n89d1s71c";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0p5zvgbas5nh403fbxica819mf3g83n8g2hzpfazfr56w6klv9yd";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.17.0";
        edition = "2018";
        sha256 = "1vm5ynzjpsqzqv15fdrk69n6y8fhwlilmqvj270ggwsnjz23mxra";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
        ];
        features = {
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "memchr" "bytes" ];
          "macros" = [ "tokio-macros" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "winapi/namedpipeapi" ];
          "process" = [ "bytes" "once_cell" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "winapi/threadpoollegacyapiset" ];
          "rt-multi-thread" = [ "num_cpus" "rt" ];
          "signal" = [ "once_cell" "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "winapi/consoleapi" ];
          "test-util" = [ "rt" "sync" "time" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "num_cpus" "rt" "rt-multi-thread" "tokio-macros" ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "1.7.0";
        edition = "2018";
        sha256 = "1ds34qsfvgf63cjgdx3gr4pl7i76fifyar15ksbillcc8hpzfmxm";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.9";
        edition = "2018";
        sha256 = "1mr40c0x3ma0dbzh4v43bfn4sj3k9ihpgq6fz1js88l6fnky30ld";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_edit 0.14.2" = rec {
        crateName = "toml_edit";
        version = "0.14.2";
        edition = "2018";
        sha256 = "1k9blqc5bnak298rjdynpavrjs01m61642p3znz6wc00fg6r7rw6";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "easy" = [ "serde" ];
          "perf" = [ "kstring" ];
        };
        resolvedDefaultFeatures = [ "default" "easy" "serde" ];
      };
      "toml_edit 0.6.0" = rec {
        crateName = "toml_edit";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0ab7n6qz2vq78q76caiqvwfbg2lidsifslcjz5lk3v3g6hw94v5l";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "kstring";
            packageId = "kstring";
            features = [ "max_inline" ];
          }
        ];
        features = {
          "easy" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.15.0";
        edition = "2018";
        sha256 = "11yrvz1vd43gqv738yw1v75rzngjbs7iwcgzjy3cq5ywkv2imy6w";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.3";
        edition = "2018";
        sha256 = "072cblf8v3wzyaz3lhbpzgil4s03dpzg1ppy3gqx2l4v622y3pjn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "uluru" = rec {
        crateName = "uluru";
        version = "3.0.0";
        edition = "2018";
        sha256 = "1nr6s90iqy7wr0ddv9zfbmyw5dc7xjfbb09c8sjbcphz38k34jkr";
        authors = [
          "The Servo Project Developers"
          "Matt Brubeck <mbrubeck@limpet.net>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
        ];

      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.7";
        edition = "2018";
        sha256 = "13v7v8pp7mdqqf0ypk73va78c3b4xzpryvbls9p47nz3cd34008s";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.19";
        edition = "2018";
        sha256 = "1yabhmg8zlcksda3ajly9hpbzqgbhknxwch8dwkfkaa1569r0ifm";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.9.0";
        edition = "2018";
        sha256 = "16gxxda9aya0arcqs9aa9lb31b3i54i34dmyqi6j5xkpszsj123y";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0wq9wl69wlp6zwlxp660g9p4hm5gk91chwk14dp1gl9bxba45mry";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1wrkgcw557v311dkdb6n2hrix9dm2qdsb1zpw7pn79l03zb85jwc";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unindent" = rec {
        crateName = "unindent";
        version = "0.1.8";
        edition = "2018";
        sha256 = "1n3kpv78282dprvyiakyzy1qhv1qm06dg945jwvxm03kbnjp4iji";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "update-holochain-versions" = rec {
        crateName = "update-holochain-versions";
        version = "0.0.1-dev.0";
        edition = "2018";
        crateBin = [
          { name = "update-holochain-versions"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ../../crates/update-holochain-versions; };
        authors = [
          "Stefan Junker <mail@stefanjunker.de>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cargo-lock";
            packageId = "cargo-lock";
          }
          {
            name = "handlebars";
            packageId = "handlebars";
          }
          {
            name = "json5";
            packageId = "json5";
          }
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rnix";
            packageId = "rnix";
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "structopt";
            packageId = "structopt";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.6.0";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "pretty_assertions";
            packageId = "pretty_assertions";
          }
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.2.2";
        edition = "2018";
        sha256 = "132pzpvfvpw33gjlzqd55n5iag9qddzffq8qbp1myfykna1w61x5";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];

      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.4";
        edition = "2015";
        sha256 = "0gs8grwdlgh0xq660d7wr80x14vxbizmd8dbp29p2pdncx8lp1s9";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "waker-fn" = rec {
        crateName = "waker-fn";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1jpfiis0frk2b36krqvk8264kgxk2dyhfzjsr8g3wah1nii2qnwx";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.3.2";
        edition = "2018";
        sha256 = "0mnszy33685v8y9js8mw6x2p3iddqs8vfj7n2dhqddnlbirz5340";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.10.2+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "1ii7nff4y1mpcrxzzvbpgxm7a1nn3szjf1n21jnx37c2g6dbsvzx";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wepoll-ffi" = rec {
        crateName = "wepoll-ffi";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1yxpkva08d5f6ih3b5hdb8h45mkz3jq3dh1bzjspfhy6qpnzshyp";
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "null-overlapped-wakeups-patch" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "ioapiset" "knownfolders" "memoryapi" "minwinbase" "minwindef" "ntstatus" "objbase" "processenv" "processthreadsapi" "shlobj" "std" "sysinfoapi" "winbase" "wincon" "winerror" "winnt" "winsock2" "winuser" "ws2ipdef" "ws2tcpip" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0y71bp7f6d536czj40dhqk0d55wfbbwqfp2ymqf1an5ibgl6rv3h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows-sys" = rec {
        crateName = "windows-sys";
        version = "0.34.0";
        edition = "2018";
        sha256 = "0988yzc9j7ps1ajf4jlh8w0d20saz7c64ky1b82c0m5snj6dgkas";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-uwp-windows-msvc");
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "AI_MachineLearning_Preview" = [ "AI_MachineLearning" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_SocialInfo" = [ "ApplicationModel" ];
          "ApplicationModel_SocialInfo_Provider" = [ "ApplicationModel_SocialInfo" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_AllJoyn" = [ "Devices" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_Perception" = [ "Devices" ];
          "Devices_Perception_Provider" = [ "Devices_Perception" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_Identity_Provider" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Cortana" = [ "Services" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Power_Diagnostics" = [ "System_Power" ];
          "System_Preview" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "UI_Xaml" = [ "UI" ];
          "UI_Xaml_Automation" = [ "UI_Xaml" ];
          "UI_Xaml_Automation_Peers" = [ "UI_Xaml_Automation" ];
          "UI_Xaml_Automation_Provider" = [ "UI_Xaml_Automation" ];
          "UI_Xaml_Automation_Text" = [ "UI_Xaml_Automation" ];
          "UI_Xaml_Controls" = [ "UI_Xaml" ];
          "UI_Xaml_Controls_Maps" = [ "UI_Xaml_Controls" ];
          "UI_Xaml_Controls_Primitives" = [ "UI_Xaml_Controls" ];
          "UI_Xaml_Core" = [ "UI_Xaml" ];
          "UI_Xaml_Core_Direct" = [ "UI_Xaml_Core" ];
          "UI_Xaml_Data" = [ "UI_Xaml" ];
          "UI_Xaml_Documents" = [ "UI_Xaml" ];
          "UI_Xaml_Hosting" = [ "UI_Xaml" ];
          "UI_Xaml_Input" = [ "UI_Xaml" ];
          "UI_Xaml_Interop" = [ "UI_Xaml" ];
          "UI_Xaml_Markup" = [ "UI_Xaml" ];
          "UI_Xaml_Media" = [ "UI_Xaml" ];
          "UI_Xaml_Media_Animation" = [ "UI_Xaml_Media" ];
          "UI_Xaml_Media_Imaging" = [ "UI_Xaml_Media" ];
          "UI_Xaml_Media_Media3D" = [ "UI_Xaml_Media" ];
          "UI_Xaml_Navigation" = [ "UI_Xaml" ];
          "UI_Xaml_Printing" = [ "UI_Xaml" ];
          "UI_Xaml_Resources" = [ "UI_Xaml" ];
          "UI_Xaml_Shapes" = [ "UI_Xaml" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_WebApp" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_SqlLite" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Xaml" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_UI_Xaml" = [ "Win32_UI" ];
          "Win32_UI_Xaml_Diagnostics" = [ "Win32_UI_Xaml" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_MsHtml" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_System" "Win32_System_LibraryLoader" "Win32_System_SystemServices" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows_aarch64_msvc" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.34.0";
        edition = "2018";
        sha256 = "07c8vcqcvkmm2d921488w05dyjl047jc03xddyszy6hj83kzpkqp";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu" = rec {
        crateName = "windows_i686_gnu";
        version = "0.34.0";
        edition = "2018";
        sha256 = "1vc8hr4hm1x89h997gwfq5q9kj1j5gj4pxdlv4lr3dxdb7kzsr15";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc" = rec {
        crateName = "windows_i686_msvc";
        version = "0.34.0";
        edition = "2018";
        sha256 = "0mk92rzdvjks01v8d5dkh1yp9syf9f0khkf168im4lq4lwmx7ncw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.34.0";
        edition = "2018";
        sha256 = "1x71512gic645ri51y6ivw1wb72h38agrvqrdlsqvvi7wbm6vkng";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.34.0";
        edition = "2018";
        sha256 = "1scxv2b9id3gj6bvpzdax496lng6x8bnm3gqx8fx068qqb63i5fi";
        authors = [
          "Microsoft"
        ];

      };
      "yaml-rust" = rec {
        crateName = "yaml-rust";
        version = "0.4.5";
        edition = "2018";
        sha256 = "118wbqrr4n6wgk5rjjnlrdlahawlxc1bdsx146mwk8f79in97han";
        authors = [
          "Yuheng Chen <yuhengchen@sensetime.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os =
      if stdenv.hostPlatform.isDarwin
      then "macos"
      else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      } ''
      echo tested by ${test}
      ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
    '';

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = target // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };
            dependenciesWithRenames =
              lib.filter (d: d ? "rename")
                (
                  filterEnabledDependenciesForThis
                    (
                      (crateConfig.buildDependencies or [ ])
                      ++ (crateConfig.dependencies or [ ])
                      ++ devDependencies
                    )
                );
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; version = package.version; };
              in
              lib.mapAttrs (name: choices: builtins.map versionAndRename choices) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or [ ]));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
        builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

